name: Application CI
on: [push, pull_request]
jobs:
  pipeline:
    name: mySephoraCicdDemo pipeline
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[ci skip]') && !contains(github.event.head_commit.message, '[skip ci]') && !contains(github.event.pull_request.title, '[skip ci]') && !contains(github.event.pull_request.title, '[ci skip]')"
    timeout-minutes: 40
    env:
      NODE_VERSION: 16.17.0
      SPRING_OUTPUT_ANSI_ENABLED: DETECT
      SPRING_JPA_SHOW_SQL: false
      JHI_DISABLE_WEBPACK_LOGS: true
      NG_CLI_ANALYTICS: false
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: 16.17.0
      - uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 11
      - name: Install node.js packages
        run: npm install
      # - name: Install Snyk CLI
      #   run: |
      #     curl -Lo ./snyk $(curl -s https://api.github.com/repositories/45247496/releases/latest | grep "browser_download_url.*snyk-linux" | cut -d ':' -f 2,3 | tr -d \" | tr -d ' ')
      #     chmod +x snyk
      # - name: Snyk test
      #   continue-on-error: true
      #   run: ./snyk test --all-projects
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      # - name: Snyk monitor
      #   continue-on-error: true
      #   run: ./snyk monitor --all-projects
      #   env:
      #     SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      # - name: Run backend test
      #   run: |
      #     chmod +x mvnw
      #     npm run ci:backend:test
      # - name: Run frontend test
      #   run: npm run ci:frontend:test
      # - name: Analyze code with SonarQube
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #   run: |
      #     if [ ! -z "$SONAR_TOKEN" ]; then
      #         ./mvnw -ntp initialize sonar:sonar -Dsonar.host.url=https://sonarcloud.io -Dsonar.organization=walido023 -Dsonar.projectKey=walido023_reusable-workfows
      #     else
      #         echo No SONAR_TOKEN, skipping...
      #     fi
      - name: Package application
        run: npm run java:jar:prod
      # - name: Deploy to Heroku
      #   if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      #   env:
      #     HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}
      #   run: |
      #     if [ ! -z "$HEROKU_API_KEY" ]; then
      #         ./mvnw -ntp com.heroku.sdk:heroku-maven-plugin:2.0.5:deploy -DskipTests -Pprod -Dheroku.buildpacks=heroku/jvm -Dheroku.appName=my-sephora-cicd-demo
      #     else
      #         echo No HEROKU_API_KEY, skipping...
      #     fi
      - name: Build and publish docker image
        if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
        run: |
          GIT_TAG=:${GITHUB_REF#refs/tags/}
          DOCKER_TAG=${GIT_TAG#:refs/heads/main}
          ./mvnw -ntp jib:build -Djib.to.image=jhipster/my-sephora-cicd-demo${DOCKER_TAG} -Djib.to.auth.username="${{ secrets.DOCKER_USERNAME }}" -Djib.to.auth.password="${{ secrets.DOCKER_PASSWORD }}" -Pprod
  # test-auth-wfi:
  #   name: "Test WIF"
  #   runs-on: ubuntu-latest
  #   timeout-minutes: 90
  #   permissions:
  #     contents: 'read'
  #     id-token: 'write'
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - id: auth
  #       uses: google-github-actions/auth@v0.4.0
  #       with:
  #         token_format: "access_token"
  #         create_credentials_file: true
  #         activate_credentials_file: true
  #         workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER_ID }}
  #         service_account: ${{ secrets.SERVICE_ACCOUNT }}
  #         access_token_lifetime: '100s'
  #     - name: Set up Cloud SDK
  #       uses: google-github-actions/setup-gcloud@v0.3.0
  #     - name: set crdential_file
  #       run: gcloud auth login --cred-file=${{steps.auth.outputs.credentials_file_path}}
  #     - name: Run gcloud
  #       run: gcloud compute instances list --zones us-east4-c
